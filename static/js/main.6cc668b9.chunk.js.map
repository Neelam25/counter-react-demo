{"version":3,"sources":["serviceWorker.js","component/navbar.jsx","component/counter.jsx","component/counters.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","react_default","a","createElement","className","href","this","props","totlaCounter","Component","Counter","state","tags","length","map","tag","key","_this2","console","log","Fragment","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Counters","_this","onReset","counters","component_counter","App","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","setState","handleDelete","counterId","filter","c","handleReset","navbar","component_counters","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cc668b9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"nav-brand\" href=\"#\">\r\n          Navbar\r\n          <span className=\"badge badge-pill badge-secondary\">\r\n            {this.props.totlaCounter}\r\n          </span>\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    //count: this.props.counter.value,\r\n    tags: [\"tag1\", \"tag2\", \"tag3\"]\r\n  };\r\n  renderTags() {\r\n    if (this.state.tags.length === 0) return <p />;\r\n    return (\r\n      <ul>\r\n        {this.state.tags.map(tag => (\r\n          <li key={tag}>{tag}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    console.log(\"props\", this.props);\r\n    return (\r\n      <React.Fragment>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n        <br />\r\n        {/* {this.renderTags()} */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.props.onReset}\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n        >\r\n          Reset\r\n        </button>\r\n        <br />\r\n        {this.props.counters.map(counter => (\r\n          <Counter\r\n            onDelete={this.props.onDelete}\r\n            onIncrement={this.props.onIncrement}\r\n            key={counter.id}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./component/navbar\";\nimport Counters from \"./component/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n  handleIncrement = counter => {\n    console.log(\"In Incrementcount\");\n    const counters = [...this.state.counters];\n    const index = this.state.counters.indexOf(counter);\n    counters[index] = { ...counter };\n    console.log(counters[index]);\n    counters[index].value++;\n    this.setState({ counters });\n  };\n  handleDelete = counterId => {\n    console.log(\"Event Handle..\", counterId);\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    console.log(\"In Reset\");\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    return this.setState({ counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          totlaCounter={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            counters={this.state.counters}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}